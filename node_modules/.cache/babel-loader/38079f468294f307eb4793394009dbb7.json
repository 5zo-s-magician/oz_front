{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Emitter = require('emitter');\n\nvar reduce = require('reduce');\n\nvar requestBase = require('./request-base');\n\nvar isObject = require('./is-object');\n/**\n * Root reference for iframes.\n */\n\n\nvar root;\n\nif (typeof window !== 'undefined') {\n  // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') {\n  // Web Worker\n  root = self;\n} else {\n  // Other environments\n  root = this;\n}\n/**\n * Noop.\n */\n\n\nfunction noop() {}\n\n;\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\n * Expose `request`.\n */\n\n\nvar request = module.exports = require('./request').bind(null, Request);\n/**\n * Determine XHR.\n */\n\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest && (!root.location || 'file:' != root.location.protocol || !root.ActiveXObject)) {\n    return new XMLHttpRequest();\n  } else {\n    try {\n      return new ActiveXObject('Microsoft.XMLHTTP');\n    } catch (e) {}\n\n    try {\n      return new ActiveXObject('Msxml2.XMLHTTP.6.0');\n    } catch (e) {}\n\n    try {\n      return new ActiveXObject('Msxml2.XMLHTTP.3.0');\n    } catch (e) {}\n\n    try {\n      return new ActiveXObject('Msxml2.XMLHTTP');\n    } catch (e) {}\n  }\n\n  return false;\n};\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\n\nvar trim = ''.trim ? function (s) {\n  return s.trim();\n} : function (s) {\n  return s.replace(/(^\\s*|\\s*$)/g, '');\n};\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pushEncodedKeyValuePair(pairs, key, obj[key]);\n    }\n  }\n\n  return pairs.join('&');\n}\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (Array.isArray(val)) {\n    return val.forEach(function (v) {\n      pushEncodedKeyValuePair(pairs, key, v);\n    });\n  }\n\n  pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));\n}\n/**\n * Expose serialization method.\n */\n\n\nrequest.serializeObject = serialize;\n/**\n * Parse the given x-www-form-urlencoded `str`.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var parts;\n  var pair;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    parts = pair.split('=');\n    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n  }\n\n  return obj;\n}\n/**\n * Expose parser.\n */\n\n\nrequest.parseString = parseString;\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nrequest.serialize = {\n  'application/x-www-form-urlencoded': serialize,\n  'application/json': JSON.stringify\n};\n/**\n * Default parsers.\n *\n *     superagent.parse['application/xml'] = function(str){\n *       return { object parsed from str };\n *     };\n *\n */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\n\nfunction isJSON(mime) {\n  return /[\\/+]json\\b/.test(mime);\n}\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\n\nfunction type(str) {\n  return str.split(/ *; */).shift();\n}\n\n;\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str) {\n  return reduce(str.split(/ *; */), function (obj, str) {\n    var parts = str.split(/ *= */),\n        key = parts.shift(),\n        val = parts.shift();\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n}\n\n;\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr; // responseText is accessible only if responseType is '' or 'text' and on older browsers\n\n  this.text = this.req.method != 'HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text') || typeof this.xhr.responseType === 'undefined' ? this.xhr.responseText : null;\n  this.statusText = this.req.xhr.statusText;\n  this.setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders()); // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD' ? this.parseBody(this.text ? this.text : this.xhr.response) : null;\n}\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\n\nResponse.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\n\nResponse.prototype.setHeaderProperties = function (header) {\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct); // params\n\n  var obj = params(ct);\n\n  for (var key in obj) this[key] = obj[key];\n};\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\n\nResponse.prototype.parseBody = function (str) {\n  var parse = request.parse[this.type];\n\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n\n  return parse && str && (str.length || str instanceof Object) ? parse(str) : null;\n};\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\n\nResponse.prototype.setStatusProperties = function (status) {\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n\n  var type = status / 100 | 0; // status / class\n\n  this.status = this.statusCode = status;\n  this.statusType = type; // basics\n\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = 4 == type || 5 == type ? this.toError() : false; // sugar\n\n  this.accepted = 202 == status;\n  this.noContent = 204 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\n\nResponse.prototype.toError = function () {\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n  return err;\n};\n/**\n * Expose `Response`.\n */\n\n\nrequest.Response = Response;\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n\n  this._header = {}; // coerces header names to lowercase\n\n  this.on('end', function () {\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch (e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e; // issue #675: return the raw response if the response parsing fails\n\n      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null; // issue #876: return the http status code if the response parsing fails\n\n      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    if (err) {\n      return self.callback(err, res);\n    }\n\n    if (res.status >= 200 && res.status < 300) {\n      return self.callback(err, res);\n    }\n\n    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n    new_err.original = err;\n    new_err.response = res;\n    new_err.status = res.status;\n    self.callback(new_err, res);\n  });\n}\n/**\n * Mixin `Emitter` and `requestBase`.\n */\n\n\nEmitter(Request.prototype);\n\nfor (var key in requestBase) {\n  Request.prototype[key] = requestBase[key];\n}\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\n\nRequest.prototype.abort = function () {\n  if (this.aborted) return;\n  this.aborted = true;\n  this.xhr && this.xhr.abort();\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.type = function (type) {\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n/**\n * Set responseType to `val`. Presently valid responseTypes are 'blob' and \n * 'arraybuffer'.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.responseType = function (val) {\n  this._responseType = val;\n  return this;\n};\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.accept = function (type) {\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.auth = function (user, pass, options) {\n  if (!options) {\n    options = {\n      type: 'basic'\n    };\n  }\n\n  switch (options.type) {\n    case 'basic':\n      var str = btoa(user + ':' + pass);\n      this.set('Authorization', 'Basic ' + str);\n      break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n  }\n\n  return this;\n};\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\n\nRequest.prototype.query = function (val) {\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.attach = function (field, file, filename) {\n  this._getFormData().append(field, file, filename || file.name);\n\n  return this;\n};\n\nRequest.prototype._getFormData = function () {\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n\n  return this._formData;\n};\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n  *      request.post('/user')\n  *        .send('name=tobi')\n  *        .send('species=ferret')\n  *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.send = function (data) {\n  var obj = isObject(data);\n  var type = this._header['content-type']; // merge\n\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data ? this._data + '&' + data : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj || isHost(data)) return this;\n  if (!type) this.type('json');\n  return this;\n};\n/**\n * @deprecated\n */\n\n\nResponse.prototype.parse = function serialize(fn) {\n  if (root.console) {\n    console.warn(\"Client-side parse() method has been renamed to serialize(). This method is not compatible with superagent v2.0\");\n  }\n\n  this.serialize(fn);\n  return this;\n};\n\nResponse.prototype.serialize = function serialize(fn) {\n  this._parser = fn;\n  return this;\n};\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\n\nRequest.prototype.callback = function (err, res) {\n  var fn = this._callback;\n  this.clearTimeout();\n  fn(err, res);\n};\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\n\nRequest.prototype.crossDomainError = function () {\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n  this.callback(err);\n};\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\n\nRequest.prototype.timeoutError = function () {\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\n\nRequest.prototype.withCredentials = function () {\n  this._withCredentials = true;\n  return this;\n};\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.end = function (fn) {\n  var self = this;\n  var xhr = this.xhr = request.getXHR();\n\n  var query = this._query.join('&');\n\n  var timeout = this._timeout;\n  var data = this._formData || this._data; // store callback\n\n  this._callback = fn || noop; // state change\n\n  xhr.onreadystatechange = function () {\n    if (4 != xhr.readyState) return; // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n\n    var status;\n\n    try {\n      status = xhr.status;\n    } catch (e) {\n      status = 0;\n    }\n\n    if (0 == status) {\n      if (self.timedout) return self.timeoutError();\n      if (self.aborted) return;\n      return self.crossDomainError();\n    }\n\n    self.emit('end');\n  }; // progress\n\n\n  var handleProgress = function (e) {\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n\n    e.direction = 'download';\n    self.emit('progress', e);\n  };\n\n  if (this.hasListeners('progress')) {\n    xhr.onprogress = handleProgress;\n  }\n\n  try {\n    if (xhr.upload && this.hasListeners('progress')) {\n      xhr.upload.onprogress = handleProgress;\n    }\n  } catch (e) {// Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n    // Reported here:\n    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n  } // timeout\n\n\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function () {\n      self.timedout = true;\n      self.abort();\n    }, timeout);\n  } // querystring\n\n\n  if (query) {\n    query = request.serializeObject(query);\n    this.url += ~this.url.indexOf('?') ? '&' + query : '?' + query;\n  } // initiate request\n\n\n  if (this.username && this.password) {\n    xhr.open(this.method, this.url, true, this.username, this.password);\n  } else {\n    xhr.open(this.method, this.url, true);\n  } // CORS\n\n\n  if (this._withCredentials) xhr.withCredentials = true; // body\n\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];\n    if (serialize) data = serialize(data);\n  } // set header fields\n\n\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  } // send stuff\n\n\n  this.emit('request', this); // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n/**\n * Expose `Request`.\n */\n\n\nrequest.Request = Request;\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function (url, data, fn) {\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nrequest.head = function (url, data, fn) {\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nfunction del(url, fn) {\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n}\n\n;\nrequest['del'] = del;\nrequest['delete'] = del;\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function (url, data, fn) {\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nrequest.post = function (url, data, fn) {\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nrequest.put = function (url, data, fn) {\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};","map":{"version":3,"sources":["/Users/ihyeonju/project/oz_front/node_modules/superagent/lib/client.js"],"names":["Emitter","require","reduce","requestBase","isObject","root","window","self","noop","isHost","obj","str","toString","call","request","module","exports","bind","Request","getXHR","XMLHttpRequest","location","protocol","ActiveXObject","e","trim","s","replace","serialize","pairs","key","pushEncodedKeyValuePair","join","val","Array","isArray","forEach","v","push","encodeURIComponent","serializeObject","parseString","split","parts","pair","i","len","length","decodeURIComponent","types","html","json","xml","urlencoded","JSON","stringify","parse","parseHeader","lines","fields","index","line","field","pop","indexOf","slice","toLowerCase","isJSON","mime","test","type","shift","params","Response","req","options","xhr","text","method","responseType","responseText","statusText","setStatusProperties","status","header","headers","getAllResponseHeaders","getResponseHeader","setHeaderProperties","body","parseBody","response","prototype","get","ct","Object","statusCode","statusType","info","ok","clientError","serverError","error","toError","accepted","noContent","badRequest","unauthorized","notAcceptable","notFound","forbidden","url","msg","err","Error","_query","_header","on","res","original","rawResponse","callback","emit","new_err","abort","aborted","clearTimeout","set","_responseType","accept","auth","user","pass","btoa","username","password","query","attach","file","filename","_getFormData","append","name","_formData","FormData","send","data","_data","fn","console","warn","_parser","_callback","crossDomainError","crossDomain","timeoutError","timeout","_timeout","withCredentials","_withCredentials","end","onreadystatechange","readyState","timedout","handleProgress","total","percent","loaded","direction","hasListeners","onprogress","upload","_timer","setTimeout","open","contentType","setRequestHeader","head","del","patch","post","put"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Emitter = require('emitter');\nvar reduce = require('reduce');\nvar requestBase = require('./request-base');\nvar isObject = require('./is-object');\n\n/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  root = this;\n}\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Expose `request`.\n */\n\nvar request = module.exports = require('./request').bind(null, Request);\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  return false;\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pushEncodedKeyValuePair(pairs, key, obj[key]);\n        }\n      }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (Array.isArray(val)) {\n    return val.forEach(function(v) {\n      pushEncodedKeyValuePair(pairs, key, v);\n    });\n  }\n  pairs.push(encodeURIComponent(key)\n    + '=' + encodeURIComponent(val));\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var parts;\n  var pair;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    parts = pair.split('=');\n    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  return /[\\/+]json\\b/.test(mime);\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n  return reduce(str.split(/ *; */), function(obj, str){\n    var parts = str.split(/ *= */)\n      , key = parts.shift()\n      , val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  this.setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD'\n    ? this.parseBody(this.text ? this.text : this.xhr.response)\n    : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype.setHeaderProperties = function(header){\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct);\n\n  // params\n  var obj = params(ct);\n  for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype.parseBody = function(str){\n  var parse = request.parse[this.type];\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype.setStatusProperties = function(status){\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n\n  var type = status / 100 | 0;\n\n  // status / class\n  this.status = this.statusCode = status;\n  this.statusType = type;\n\n  // basics\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = (4 == type || 5 == type)\n    ? this.toError()\n    : false;\n\n  // sugar\n  this.accepted = 202 == status;\n  this.noContent = 204 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;\n      // issue #876: return the http status code if the response parsing fails\n      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    if (err) {\n      return self.callback(err, res);\n    }\n\n    if (res.status >= 200 && res.status < 300) {\n      return self.callback(err, res);\n    }\n\n    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n    new_err.original = err;\n    new_err.response = res;\n    new_err.status = res.status;\n\n    self.callback(new_err, res);\n  });\n}\n\n/**\n * Mixin `Emitter` and `requestBase`.\n */\n\nEmitter(Request.prototype);\nfor (var key in requestBase) {\n  Request.prototype[key] = requestBase[key];\n}\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\nRequest.prototype.abort = function(){\n  if (this.aborted) return;\n  this.aborted = true;\n  this.xhr && this.xhr.abort();\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set responseType to `val`. Presently valid responseTypes are 'blob' and \n * 'arraybuffer'.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (!options) {\n    options = {\n      type: 'basic'\n    }\n  }\n\n  switch (options.type) {\n    case 'basic':\n      var str = btoa(user + ':' + pass);\n      this.set('Authorization', 'Basic ' + str);\n    break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n    break;\n  }\n  return this;\n};\n\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n  this._getFormData().append(field, file, filename || file.name);\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n  *      request.post('/user')\n  *        .send('name=tobi')\n  *        .send('species=ferret')\n  *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.send = function(data){\n  var obj = isObject(data);\n  var type = this._header['content-type'];\n\n  // merge\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj || isHost(data)) return this;\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * @deprecated\n */\nResponse.prototype.parse = function serialize(fn){\n  if (root.console) {\n    console.warn(\"Client-side parse() method has been renamed to serialize(). This method is not compatible with superagent v2.0\");\n  }\n  this.serialize(fn);\n  return this;\n};\n\nResponse.prototype.serialize = function serialize(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  var fn = this._callback;\n  this.clearTimeout();\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype.timeoutError = function(){\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequest.prototype.withCredentials = function(){\n  this._withCredentials = true;\n  return this;\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  var self = this;\n  var xhr = this.xhr = request.getXHR();\n  var query = this._query.join('&');\n  var timeout = this._timeout;\n  var data = this._formData || this._data;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // state change\n  xhr.onreadystatechange = function(){\n    if (4 != xhr.readyState) return;\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (0 == status) {\n      if (self.timedout) return self.timeoutError();\n      if (self.aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(e){\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = 'download';\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    xhr.onprogress = handleProgress;\n  }\n  try {\n    if (xhr.upload && this.hasListeners('progress')) {\n      xhr.upload.onprogress = handleProgress;\n    }\n  } catch(e) {\n    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n    // Reported here:\n    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n  }\n\n  // timeout\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self.timedout = true;\n      self.abort();\n    }, timeout);\n  }\n\n  // querystring\n  if (query) {\n    query = request.serializeObject(query);\n    this.url += ~this.url.indexOf('?')\n      ? '&' + query\n      : '?' + query;\n  }\n\n  // initiate request\n  if (this.username && this.password) {\n    xhr.open(this.method, this.url, true, this.username, this.password);\n  } else {\n    xhr.open(this.method, this.url, true);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nfunction del(url, fn){\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n"]},"metadata":{},"sourceType":"script"}