{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAudioDurationInSeconds = void 0;\n\nconst ffprobe = require(\"node-ffprobe-installer\");\n\nconst execa = require(\"execa\");\n\nconst isStream = require(\"is-stream\");\n\nconst getFFprobeWrappedExecution = input => {\n  const params = ['-v', 'error', '-select_streams', 'a:0', '-show_format', '-show_streams'];\n\n  if (typeof input === 'string') {\n    return execa(ffprobe.path, [...params, input]);\n  }\n\n  if (isStream(input)) {\n    return execa(ffprobe.path, [...params, '-i', 'pipe:0'], {\n      reject: false,\n      input\n    });\n  }\n\n  throw new Error('Given input was neither a string nor a Stream');\n};\n/**\n * Returns a promise that will be resolved with the duration of given audio in\n * seconds.\n *\n * @param  {string|ReadableStream} input Stream or path to file to be used as\n * input for `ffprobe`.\n *\n * @return {Promise} Promise that will be resolved with given audio duration in\n * seconds.\n */\n\n\nconst getAudioDurationInSeconds = input => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    stdout\n  } = yield getFFprobeWrappedExecution(input);\n  const matched = stdout.match(/duration=\"?(\\d*\\.\\d*)\"?/);\n  if (matched && matched[1]) return parseFloat(matched[1]);\n  throw new Error('No duration found!');\n});\n\nexports.getAudioDurationInSeconds = getAudioDurationInSeconds;\nexports.default = getAudioDurationInSeconds;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAGA,MAAM,0BAA0B,GAC9B,KADiC,IAEN;AAC3B,QAAM,MAAM,GAAG,CACb,IADa,EAEb,OAFa,EAGb,iBAHa,EAIb,KAJa,EAKb,cALa,EAMb,eANa,CAAf;;AASA,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,KAAK,CAAC,OAAO,CAAC,IAAT,EAAe,CAAC,GAAG,MAAJ,EAAY,KAAZ,CAAf,CAAZ;AACD;;AAED,MAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AACnB,WAAO,KAAK,CAAC,OAAO,CAAC,IAAT,EAAe,CAAC,GAAG,MAAJ,EAAY,IAAZ,EAAkB,QAAlB,CAAf,EAA4C;AACtD,MAAA,MAAM,EAAE,KAD8C;AAEtD,MAAA;AAFsD,KAA5C,CAAZ;AAID;;AAED,QAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACD,CAxBD;AA0BA;;;;;;;;;AASG;;;AACH,MAAM,yBAAyB,GAC7B,KADgC,IAEb,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnB,QAAM;AAAE,IAAA;AAAF,MAAa,MAAM,0BAA0B,CAAC,KAAD,CAAnD;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,KAAP,CAAa,yBAAb,CAAhB;AACA,MAAI,OAAO,IAAI,OAAO,CAAC,CAAD,CAAtB,EAA2B,OAAO,UAAU,CAAC,OAAO,CAAC,CAAD,CAAR,CAAjB;AAC3B,QAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACD,CALoB,CAFrB;;AAUS,OAAA,CAAA,yBAAA,GAAA,yBAAA;AADT,OAAA,CAAA,OAAA,GAAe,yBAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAudioDurationInSeconds = void 0;\nconst ffprobe = require(\"node-ffprobe-installer\");\nconst execa = require(\"execa\");\nconst isStream = require(\"is-stream\");\nconst getFFprobeWrappedExecution = (input) => {\n    const params = [\n        '-v',\n        'error',\n        '-select_streams',\n        'a:0',\n        '-show_format',\n        '-show_streams',\n    ];\n    if (typeof input === 'string') {\n        return execa(ffprobe.path, [...params, input]);\n    }\n    if (isStream(input)) {\n        return execa(ffprobe.path, [...params, '-i', 'pipe:0'], {\n            reject: false,\n            input,\n        });\n    }\n    throw new Error('Given input was neither a string nor a Stream');\n};\n/**\n * Returns a promise that will be resolved with the duration of given audio in\n * seconds.\n *\n * @param  {string|ReadableStream} input Stream or path to file to be used as\n * input for `ffprobe`.\n *\n * @return {Promise} Promise that will be resolved with given audio duration in\n * seconds.\n */\nconst getAudioDurationInSeconds = (input) => __awaiter(void 0, void 0, void 0, function* () {\n    const { stdout } = yield getFFprobeWrappedExecution(input);\n    const matched = stdout.match(/duration=\"?(\\d*\\.\\d*)\"?/);\n    if (matched && matched[1])\n        return parseFloat(matched[1]);\n    throw new Error('No duration found!');\n});\nexports.getAudioDurationInSeconds = getAudioDurationInSeconds;\nexports.default = getAudioDurationInSeconds;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}