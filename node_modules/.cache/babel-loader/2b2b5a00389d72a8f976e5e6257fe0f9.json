{"ast":null,"code":"'use strict';\n\nconst os = require('os');\n\nconst path = require('path');\n\nconst verifyFile = require('./lib/verify-file');\n\nconst platform = os.platform() + '-' + os.arch();\nlet packageName = '@ffprobe-installer/' + platform;\n\nif (platform === 'darwin-arm64') {\n  packageName = 'ffprobe-darwin-arm64';\n}\n\nif (!require('./package.json').optionalDependencies[packageName]) {\n  throw new Error('Unsupported platform/architecture: ' + platform);\n}\n\nconst binary = os.platform() === 'win32' ? 'ffprobe.exe' : 'ffprobe';\nlet appFolder = path.dirname(process.pkg ? process.execPath : require.main ? require.main.filename : process.argv[0]);\nconst npm3Path = path.resolve(appFolder, '..', 'node_modules', packageName);\nconst npm2Path = path.resolve(appFolder, 'node_modules', packageName);\nconst npm3Binary = path.join(npm3Path, binary);\nconst npm2Binary = path.join(npm2Path, binary);\nconst npm3Package = path.join(npm3Path, 'package.json');\nconst npm2Package = path.join(npm2Path, 'package.json');\nlet ffprobePath;\nlet packageJson;\n\nif (verifyFile(npm3Binary)) {\n  ffprobePath = npm3Binary;\n  packageJson = require(npm3Package);\n} else if (verifyFile(npm2Binary)) {\n  ffprobePath = npm2Binary;\n  packageJson = require(npm2Package);\n} else {\n  throw new Error('Could not find ffprobe executable, tried \"' + npm3Binary + '\" and \"' + npm2Binary + '\"');\n}\n\nconst version = packageJson.ffprobe || packageJson.version;\nconst url = packageJson.homepage;\nmodule.exports = {\n  path: ffprobePath,\n  version,\n  url\n};","map":{"version":3,"sources":["/Users/ihyeonju/project/vcmusic_front/node_modules/node-ffprobe-installer/index.js"],"names":["os","require","path","verifyFile","platform","arch","packageName","optionalDependencies","Error","binary","appFolder","dirname","process","pkg","execPath","main","filename","argv","npm3Path","resolve","npm2Path","npm3Binary","join","npm2Binary","npm3Package","npm2Package","ffprobePath","packageJson","version","ffprobe","url","homepage","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,UAAU,GAAGF,OAAO,CAAC,mBAAD,CAA1B;;AAEA,MAAMG,QAAQ,GAAGJ,EAAE,CAACI,QAAH,KAAgB,GAAhB,GAAsBJ,EAAE,CAACK,IAAH,EAAvC;AAEA,IAAIC,WAAW,GAAG,wBAAwBF,QAA1C;;AAEA,IAAIA,QAAQ,KAAK,cAAjB,EAAiC;AAChCE,EAAAA,WAAW,GAAG,sBAAd;AACA;;AAED,IAAI,CAACL,OAAO,CAAC,gBAAD,CAAP,CAA0BM,oBAA1B,CAA+CD,WAA/C,CAAL,EAAkE;AACjE,QAAM,IAAIE,KAAJ,CAAU,wCAAwCJ,QAAlD,CAAN;AACA;;AAED,MAAMK,MAAM,GAAGT,EAAE,CAACI,QAAH,OAAkB,OAAlB,GAA4B,aAA5B,GAA4C,SAA3D;AAEA,IAAIM,SAAS,GAAGR,IAAI,CAACS,OAAL,CAAaC,OAAO,CAACC,GAAR,GAAcD,OAAO,CAACE,QAAtB,GAAkCb,OAAO,CAACc,IAAR,GAAed,OAAO,CAACc,IAAR,CAAaC,QAA5B,GAAuCJ,OAAO,CAACK,IAAR,CAAa,CAAb,CAAtF,CAAhB;AAEA,MAAMC,QAAQ,GAAGhB,IAAI,CAACiB,OAAL,CAAaT,SAAb,EAAwB,IAAxB,EAA8B,cAA9B,EAA8CJ,WAA9C,CAAjB;AACA,MAAMc,QAAQ,GAAGlB,IAAI,CAACiB,OAAL,CAAaT,SAAb,EAAwB,cAAxB,EAAwCJ,WAAxC,CAAjB;AAEA,MAAMe,UAAU,GAAGnB,IAAI,CAACoB,IAAL,CAAUJ,QAAV,EAAoBT,MAApB,CAAnB;AACA,MAAMc,UAAU,GAAGrB,IAAI,CAACoB,IAAL,CAAUF,QAAV,EAAoBX,MAApB,CAAnB;AAEA,MAAMe,WAAW,GAAGtB,IAAI,CAACoB,IAAL,CAAUJ,QAAV,EAAoB,cAApB,CAApB;AACA,MAAMO,WAAW,GAAGvB,IAAI,CAACoB,IAAL,CAAUF,QAAV,EAAoB,cAApB,CAApB;AAEA,IAAIM,WAAJ;AACA,IAAIC,WAAJ;;AAEA,IAAIxB,UAAU,CAACkB,UAAD,CAAd,EAA4B;AAC3BK,EAAAA,WAAW,GAAGL,UAAd;AACAM,EAAAA,WAAW,GAAG1B,OAAO,CAACuB,WAAD,CAArB;AACA,CAHD,MAGO,IAAIrB,UAAU,CAACoB,UAAD,CAAd,EAA4B;AAClCG,EAAAA,WAAW,GAAGH,UAAd;AACAI,EAAAA,WAAW,GAAG1B,OAAO,CAACwB,WAAD,CAArB;AACA,CAHM,MAGA;AACN,QAAM,IAAIjB,KAAJ,CAAU,+CAA+Ca,UAA/C,GAA4D,SAA5D,GAAwEE,UAAxE,GAAqF,GAA/F,CAAN;AACA;;AAED,MAAMK,OAAO,GAAGD,WAAW,CAACE,OAAZ,IAAuBF,WAAW,CAACC,OAAnD;AACA,MAAME,GAAG,GAAGH,WAAW,CAACI,QAAxB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AAChB/B,EAAAA,IAAI,EAAEwB,WADU;AAEhBE,EAAAA,OAFgB;AAGhBE,EAAAA;AAHgB,CAAjB","sourcesContent":["'use strict';\n\nconst os = require('os');\nconst path = require('path');\n\nconst verifyFile = require('./lib/verify-file');\n\nconst platform = os.platform() + '-' + os.arch();\n\nlet packageName = '@ffprobe-installer/' + platform;\n\nif (platform === 'darwin-arm64') {\n\tpackageName = 'ffprobe-darwin-arm64';\n}\n\nif (!require('./package.json').optionalDependencies[packageName]) {\n\tthrow new Error('Unsupported platform/architecture: ' + platform);\n}\n\nconst binary = os.platform() === 'win32' ? 'ffprobe.exe' : 'ffprobe';\n\nlet appFolder = path.dirname(process.pkg ? process.execPath : (require.main ? require.main.filename : process.argv[0]));\n\nconst npm3Path = path.resolve(appFolder, '..', 'node_modules', packageName);\nconst npm2Path = path.resolve(appFolder, 'node_modules', packageName);\n\nconst npm3Binary = path.join(npm3Path, binary);\nconst npm2Binary = path.join(npm2Path, binary);\n\nconst npm3Package = path.join(npm3Path, 'package.json');\nconst npm2Package = path.join(npm2Path, 'package.json');\n\nlet ffprobePath;\nlet packageJson;\n\nif (verifyFile(npm3Binary)) {\n\tffprobePath = npm3Binary;\n\tpackageJson = require(npm3Package);\n} else if (verifyFile(npm2Binary)) {\n\tffprobePath = npm2Binary;\n\tpackageJson = require(npm2Package);\n} else {\n\tthrow new Error('Could not find ffprobe executable, tried \"' + npm3Binary + '\" and \"' + npm2Binary + '\"');\n}\n\nconst version = packageJson.ffprobe || packageJson.version;\nconst url = packageJson.homepage;\n\nmodule.exports = {\n\tpath: ffprobePath,\n\tversion,\n\turl\n};\n"]},"metadata":{},"sourceType":"script"}